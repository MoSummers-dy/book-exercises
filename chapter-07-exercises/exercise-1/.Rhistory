# install.packages("stringr")
# Author: Diana Dai
library("stringr")
#################
#### PART 1 #####
#################
# 1
my_age <- 20
# 2
my_name <- "Diana"
# 3
# Introduce someone by the given name and age.
# Take in a string and a number, and return the introduction.
make_introduction <- function(name, age) {
paste("Hello, my name is", name, "and I'm", age, "years old.")
}
# 4
my_intro <- make_introduction(my_name, my_age)
my_intro
# 5
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
# 6
capital_intro <- str_to_title(my_intro)
print(capital_intro)
# 7
intro_e_count <- str_count(my_intro, pattern = "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
# 1
books <- c("Three Body", "A Thousand Splendid Suns", "The Kite Runner",
"The Great Gatsby", "1984", "Brave New World")
print(books)
# 2
top_three_books <- books[1:3]
print(top_three_books)
# 3
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
# 4
# remove books with the given indexes from the given list of books.
# Return a new vector with the rest of the books.
remove_book <- function(book_titles, index) {
return(book_titles[-index])
}
# 5
books_without_five <- remove_book(books, 5)
print(books_without_five)
# 6
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
# 1
numbers <- seq(1,201)
# 2
squared_numbers <- numbers * numbers
# 3
squared_mean <- mean(squared_numbers)
print(squared_mean)
# 4
squared_median <- median(squared_numbers)
print(squared_median)
# 5
perfect_squared <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(perfect_squared)
#################
#### PART 4 #####
#################
# 1
spring_break <- as.Date("2020-3-21")
# 2
class(spring_break)
# 3
today <- as.Date(Sys.Date())
# 4
days_to_break <- spring_break - today
print(days_to_break)
# 5
# Change the year of a given date.
# Take in a date and a year-number, return a new date with year changed.
change_year <- function(date_value, year){
date_as_string <- as.character(date_value) # convert date into a string
date_as_string <- substr(date_as_string, 5, 10) # extract the month and day
year_as_number <- as.integer(year)
# create a string with the new date
new_date_string <- paste(year_as_number, date_as_string, sep = "")
as.Date(new_date_string) # convert into Date and return the value
}
# 6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
# 7
# Return whether the given date has passed based on current system time.
date_has_passed <- function(date_value) {
date_value - as.Date(Sys.Date()) < 0
}
# 8
date_has_passed(as.Date("2020-01-23"))
# 9
birthdays <- list(
Lei = as.Date("1970-12-15"),
Rong = as.Date("1971-02-04"),
Diana = as.Date("1999-12-19")
)
print(birthdays)
# 10
# Return the next birthday from the given birthdate.
get_next_birthday <- function(birthdate) {
birthdate <- change_year(birthdate, 2020)
if (date_has_passed(birthdate)) {
change_year(birthdate, 2021)
}
birthdate
}
# 11
get_next_birthday(birthdays$Diana)
# 12
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
